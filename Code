import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

#   1. Importing the Dataset

#Reading dataset matches
Matches_df = pd.read_csv("C:/Users/HAZARIKA/Desktop/matches.csv")
Matches_df.head()

#Reading deliveries dataset
Deliveries_df = pd.read_csv("C:/Users/HAZARIKA/Desktop/deliveries.csv")
Deliveries_df.head()

#  2. Data Preparation and Cleaning

Matches_df.info()
Deliveries_df.info()

Matches_df.isnull().sum()

#The variable 'umpire3' is dropped because it contains too many missing data.
Matches_df.drop('umpire3',axis = 1, inplace=True)

Deliveries_df.isnull().sum()

#player_dismissed,dismissal_kind,fielder have lot of missing values
#It is normal for these features to contain missing data as dismissal of player does not happen in every ball or over.

Matches_df["team1"].unique()

Matches_df["team2"].unique()

Deliveries_df["batting_team"].unique()

Deliveries_df["bowling_team"].unique()

#'Rising Pune Supergiant' & 'Rising Pune Supergiants' are same
Matches_df.replace('Rising Pune Supergiant','Rising Pune Supergiants', inplace=True)
Deliveries_df.replace('Rising Pune Supergiant','Rising Pune Supergiants', inplace=True)

Matches_df["city"].unique()

#'Bangalore' & 'Bengaluru' are same
Matches_df.replace('Bangalore','Bengaluru', inplace=True)

# 3. Exploratory Analysis and Visualization

#Number of wins per team: "Mumbai Indians is the most successful team with highest wins in 4 seasons 
#followed by Chennai Super Kings with 3 seasons"
plt.subplots(figsize=(11,6))
season_winner = Matches_df.drop_duplicates('season', keep='last')
ax=sns.countplot(x='winner', data=season_winner, palette = 'inferno')
plt.xticks(rotation=90)
for p in ax.patches:
    ax.annotate(str(p.get_height()), (p.get_x(), p.get_height()))
plt.show()

#Top 10 Players based on MOM:CH Gayle is the player with the most man of the match award with 21 
#followed by AB de Villiers with 20
plt.subplots(figsize=(16,8))
ax = sns.barplot(x = Matches_df['player_of_match'].value_counts()[:10].index, y = Matches_df['player_of_match'].value_counts()[:10],palette = 'inferno')
plt.ylabel('Number of MOM won',fontsize=15)
plt.title('Top 10 players based on MOM won',fontsize=20)
plt.xlabel('Players',fontsize=12)
plt.xticks(rotation=90,fontsize=14)
for p in ax.patches:
    ax.annotate(np.round(p.get_height(), decimals=0).astype(np.int64), (p.get_x(), p.get_height()))
plt.show()

#factors contributing win or loss of a team.

len(Matches_df)

defending = Matches_df['win_by_runs'].value_counts()
defending.sort_values(ascending=False)

chasing = Matches_df['win_by_wickets'].value_counts()
chasing.sort_values(ascending=False)

#There were more matches won by chasing the total(419 matches) i.e. 55% than defending(350 matches) i.e.45%.
Matches_df['win_by']=np.where(Matches_df['win_by_runs']>0,'Bat first','Bowl first')
match=Matches_df.win_by.value_counts()
labels=np.array(match.index)
sizes = match.values
colors = ['red', 'blue']
plt.pie(sizes, labels=labels, colors=colors,
        autopct='%1.1f%%', shadow=True,startangle=90)

plt.title('Match Result')
plt.axis('equal')
plt.show()

#Toss Decision:

# 61% of toss decision is fielding and 39% is batting.
toss=Matches_df.toss_decision.value_counts()
labels=np.array(toss.index)
sizes = toss.values
colors = ['purple', 'brown']
plt.pie(sizes, labels=labels, colors=colors,
        autopct='%1.1f%%', shadow=True,startangle=90)

plt.title('Toss Result')
plt.axis('equal')
plt.show()

#number of matches win is higher when toss_decision is 'field'.
plt.subplots(figsize=(16,9))
toss=Matches_df[Matches_df['toss_winner']==Matches_df['winner']]
ax = sns.countplot("winner", data = toss, hue = 'toss_decision',order = toss['toss_winner'].value_counts().index,palette='inferno')
plt.title("Number of winning teams according to the toss decision",fontsize=15)
plt.xticks(rotation='vertical', ha = 'right',fontsize=15)
plt.ylabel('Number of Matches Win',fontsize=15)
plt.xlabel('Winner',fontsize=15)
for p in ax.patches:
    ax.annotate(np.round(p.get_height(), decimals=0).astype(np.int64), (p.get_x(), p.get_height()))
plt.show()

# To analyse if toss winners are match winners in most seasons.
#In the final matches in each seasons, most of the toss winners are match winners

final_matches=Matches_df.drop_duplicates(subset=['season'], keep='last')

final_matches[['season','winner', 'toss_winner']].reset_index(drop=True).sort_values('season')

#Suggest teams or players a company should endorse for its products.

#Batsman analysis:

#Top 10 Batsman with most number of Fours
#Shekhar Dhawan has scored highest fours followed by SK Raina

batsman_df = Deliveries_df.groupby('batsman')['batsman_runs'].agg(lambda x: (x==4).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)
batsman_df = batsman_df.iloc[:10,:]

labels = np.array(batsman_df['batsman'])
ind = np.arange(len(labels))
width = 0.9
fig, ax = plt.subplots(figsize=(15,8))
rects = ax.bar(ind, np.array(batsman_df['batsman_runs']), width=width, color='lightskyblue')
ax.set_xticks(ind+((width)/2.))
ax.set_xticklabels(labels, rotation='vertical')
ax.set_ylabel("Count")
ax.set_title("Top 10 Batsman with most number of Fours",fontsize = 10)
for p in ax.patches:
    ax.annotate(np.round(p.get_height(), decimals=0).astype(np.int64), (p.get_x(), p.get_height()))
plt.show()

#Top 10 Batsman with most number of Fours
##CH Gayle has scored highest sixes followed by AB de Villiers

batsman_df = Deliveries_df.groupby('batsman')['batsman_runs'].agg(lambda x: (x==6).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)
batsman_df = batsman_df.iloc[:10,:]

labels = np.array(batsman_df['batsman'])
ind = np.arange(len(labels))
width = 0.9
fig, ax = plt.subplots(figsize=(15,8))
rects = ax.bar(ind, np.array(batsman_df['batsman_runs']), width=width, color='purple')
ax.set_xticks(ind+((width)/2.))
ax.set_xticklabels(labels, rotation='vertical')
ax.set_ylabel("Count")
ax.set_title("Top 10 Batsman with most number of Sixes",fontsize = 10)
for p in ax.patches:
    ax.annotate(np.round(p.get_height(), decimals=0).astype(np.int64), (p.get_x(), p.get_height()))
plt.show()

#Batsman with highest runs in IPL
# Virat Kohli is the highest run scorer followed by SK Raina

batsman_df = Deliveries_df.groupby('batsman')['batsman_runs'].agg('sum').reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)
batsman_df = batsman_df.iloc[:10,:]

labels = np.array(batsman_df['batsman'])
ind = np.arange(len(labels))
width = 0.9
fig, ax = plt.subplots(figsize=(15,8))
rects = ax.bar(ind, np.array(batsman_df['batsman_runs']), width=width, color='yellow')
ax.set_xticks(ind+((width)/2.))
ax.set_xticklabels(labels, rotation='vertical')
ax.set_ylabel("Count")
ax.set_title("Batsman with highest runs in IPL")
ax.set_xlabel('Batsmane Name')
for p in ax.patches:
    ax.annotate(np.round(p.get_height(), decimals=0).astype(np.int64), (p.get_x(), p.get_height()))
plt.show()

#Bowler Analysis

#Top 10 bowlers in IPL who bowled maximum balls
#Harbhajan Singh is the bowler with highest balls followed by A Misra

df = pd.merge(Matches_df, Deliveries_df, left_on='id', right_on='match_id')
bowler = df['bowler'].value_counts()[:10]

plt.figure(figsize=(15,7))
plt.bar(x=bowler.index, height=bowler.values,color='orange')

plt.title('Bowlers who bowled maximum balls', fontsize=20)
plt.xlabel('BOWLER',fontsize=15)
plt.ylabel('BALLS',fontsize=15)

for i,v in enumerate(bowler.values):
    plt.text(x=i, y=v+1, s=v)
    
plt.show()

#Top 10 bowlers in IPL with highest wicket.
# SL Malinga is the bowler with highest wicket of 170 followed by A Mishra with 156 wickets

bowling_wickets= Deliveries_df[Deliveries_df['dismissal_kind']!='run out']
bowling_tot=bowling_wickets.groupby('bowler').apply(lambda x:x['dismissal_kind'].dropna()).reset_index(name='Wickets')
bowling_wick_count=bowling_tot.groupby('bowler').count().reset_index()
bowling_top=bowling_wick_count.sort_values(by='Wickets',ascending=False)
top_bowlers=bowling_top.loc[:,['bowler','Wickets']][0:10] 
print('The Top Wicket Takers in the Tournament are:\n',top_bowlers)
plt.bar(top_bowlers['bowler'],top_bowlers['Wickets'],color='r')
plt.plot(top_bowlers['bowler'],top_bowlers['Wickets'],color='g')
plt.xticks(rotation=90)
plt.xlabel('Top 10 Bowlers',size=15)
plt.ylabel('Wickets Taken',size=15)
plt.title('Top 10 Bowlers with highest wickets in IPL',size=20)
plt.show()

#CONCLUSION::

# MOST SUCCESSFUL TEAMS:
#Mumbai Indians is the most successful team with highest wins in 4 seasons followed by Chennai Super Kings with 3 seasons

# MOST SUCCESSFUL PLAYERS:
#CH Gayle is the player with the most man of the match award with 21 followed by AB de Villiers with 20.

# FACTORS CONTRIBUTING WIN OR LOSS OF A TEAM.
#There were more matches won by chasing the total(419 matches, 55%) than defending(350 matches, 45%).
#The number of wins is higher when toss_decision is 'field'.
#Toss winners are match winners in most IPL season's final matches.

#SUGGEST TEAMS OR PLAYERS A COMPANY SHOULD ENDORSE FOR ITS PRODUCTS.
#The teams that can be recommended for companies for the teams are: Mumbai Indians, Chennai Super Kings and Kolkata Knight Riders.
#The recommended bowler for companies could be: SL Malinga, Harbajan Singh and A.Mishra.
#The recommended batman for companies could be: CH Gayle, AB de Villiers, V Kohli, S Dhawan and SK Raina.
